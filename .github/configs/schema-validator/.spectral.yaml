extends: 'ibm-oas-wrapper-check-components.js'
functions: [spellcheckSubstrings,
            validateXOBFields,
            refPathExists,
            validateItemTypeGroupEntries,
            validateXOBSampleValue,
            validateItemTypeAgainstElementType]
rules:
  enum-case-convention: off
  major-version-in-path: off
  openapi-tags: off
  oas3-api-servers: off
  oas3-unused-component: off
  property-case-convention: off
  property-description: off
  property-inconsistent-name-and-type: off
  
  element-valid-item-type:
    message: 'Item type does not exist: {{error}}'
    given: $.components.schemas[*].allOf[1][x-ob-item-type]
    severity: error
    then:
      function: validateXOBFields
      functionOptions:
        objectPath: x-ob-item-types
  
  element-valid-item-type-group:
    message: 'Item type group does not exist: {{error}}'
    given: $.components.schemas[*].allOf[1][x-ob-item-type-group]
    severity: error
    then:
      function: validateXOBFields
      functionOptions:
        objectPath: x-ob-item-type-groups

  item-type-group-valid-type:
    message: 'Item type group type does not exist: {{error}}'
    given: $[x-ob-item-type-groups][*].type
    severity: error
    then:
      function: refPathExists
  
  item-type-group-valid-entries:
    description: The enums or units in the item type group exist in the item type definition.
    message: '{{error}}'
    given: $[x-ob-item-type-groups][*]~
    severity: error
    then:
      function: validateItemTypeGroupEntries
  
  element-valid-sample-value:
    description: >-
      Checks that the sample value is an object and that it's fields are only primitives,
      Value has the correct OpenAPI type, Value is an enum of the OB item type if applicable,
      and Unit is a unit of the OB item type if applicable.
      Additional validation rules for each primitve can be added to validateXOBSampleValue.
    message: '{{error}}'
    # Give entire 'allOf' array of an element definition
    # Spectral resolves all $ref's, so allOf[0].properties.Value exists
    given: $.components.schemas[*][?(@property === 'allOf' && @[0].properties.Value)]
    severity: error
    then:
      function: validateXOBSampleValue
      functionOptions:
        # Require sample value be a nonempty object
        requireAtLeastOneField: false
        enumItemTypeIgnoreList:
          - UUIDItemType # Value is checked against the regex of UUID

  element-valid-openapi-type-and-item-type:
    description: >-
      Check that the element's OpenAPI type and OB item type are compatible.
      OpenAPI 'integer' and 'number' types are only compatible with OB unit item types.
      OpenAPI 'boolean' and 'string' types are only compatible with OB enum item types.
      For OB item types without enums or units, all schema definitons that use these
      OB item types should have the same OpenAPI type.
    message: '{{error}}'
    given: $.components.schemas[*][?(@property === 'allOf' && @[0].properties.Value)]
    severity: error
    then:
      function: validateItemTypeAgainstElementType
  
  no-special-characters:
    description: Name must only contain characters in 0-9, A-Z, a-z, and _ (underscore).
    type: style
    given:
      - $.components.schemas[*]~ # Schema Element and Object Names
      - $.x-ob-item-types[*]~ # OB Item Types
      - $.x-ob-item-types[*].enums[*]~ # OB Item Type Enums
      - $.x-ob-item-type-groups[*]~ # OB Item Type Groups
    severity: error
    then:
      function: pattern
      functionOptions:
        match: ^[0-9A-Za-z_]+$

  upper-camel-case-with-all-caps-acronyms:
    description: Name should follow the upper camel case convention with all-caps acronyms.
    type: style
    given:
      - $.components.schemas[*]~ # Schema Element and Object Names
      - $.x-ob-item-types[*]~ # OB Item Types
      - $.x-ob-item-types[*].enums[*]~ # OB Item Type Enums
      - $.x-ob-item-type-groups[*]~ # OB Item Type Groups
    severity: warn
    then:
      function: pattern
      functionOptions:
        match: ^[0-9A-Z][a-z0-9_]*([A-Z]+[a-z0-9_]*)*$ # modified version of k8s_camel_case to allow upper case letter beginning

  spellcheck-upper-camel-case-substrings:
    message: 'These substrings are not in the dictionary: {{error}}'
    type: style
    given:
      - $.components.schemas[*]~ # Schema Element and Object Names
      - $.x-ob-item-types[*]~ # OB Item Types
      - $.x-ob-item-types[*].enums[*]~ # OB Item Type Enums
      - $.x-ob-item-type-groups[*]~ # OB Item Type Groups
    severity: warn
    then:
      function: spellcheckSubstrings
      functionOptions:
        substringMatch: '[0-9]+|[A-Z][a-z]+|[A-Z]+(?![a-z])'
        dictionaries:
          - name: en_US
            path: node_modules/typo-js/dictionaries
          - name: OB-words
            path: .github/configs/schema-validator/OB-dictionaries
